<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Hugo Bootstrap</title>
    <link>https://wangtingkui.com/tags/go/</link>
    <description>Recent content in go on Hugo Bootstrap</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Razon Yang. All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 14 Oct 2020 14:42:29 +0800</lastBuildDate><atom:link href="https://wangtingkui.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 中 sort 包的使用</title>
      <link>https://wangtingkui.com/posts/go/sort/</link>
      <pubDate>Wed, 14 Oct 2020 14:42:29 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/sort/</guid>
      <description>排序是日常开发工作中最常见的需求之一，本片文章我们来看下 Go 中如何对数据进行排序 Go 的标准库中提供了 sort 包来辅助我们进行排序工作，只要我们的数据实</description>
    </item>
    
    <item>
      <title>Go标准库（sync）- 使用</title>
      <link>https://wangtingkui.com/posts/go/sync/</link>
      <pubDate>Fri, 19 Jun 2020 15:32:25 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/sync/</guid>
      <description>Go 的一大特点就是在语言级别实现了并发，一旦涉及并发，那么不可避免的就需要同步，来确保多个 goroutine 在访问共享资源的时候不会出现混乱的状况 Go 中的 sync 包提</description>
    </item>
    
    <item>
      <title>go中Context的使用</title>
      <link>https://wangtingkui.com/posts/go/context/</link>
      <pubDate>Sun, 07 Jun 2020 15:33:50 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/context/</guid>
      <description>go 中的 Context 的主要作用是在多个 groutine 之间同步取消信号或者截止日期，用于减少对资源的消耗和长时间占用，避免资源浪费。也可以利用 Context 来进行值的传递，但是使</description>
    </item>
    
    <item>
      <title>使用 jordan-wright/email 处理邮件发送</title>
      <link>https://wangtingkui.com/posts/go/mail/</link>
      <pubDate>Sun, 07 Jun 2020 14:49:31 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/mail/</guid>
      <description>在 go 官方的标准库中，提供了 net/smtp 库可以让我们使用 smtp 协议来发送邮件，但是这个库使用起来不是很方便，而且官方也不再维护这个库，推荐我们使用功能更丰富</description>
    </item>
    
    <item>
      <title>go中channel的使用</title>
      <link>https://wangtingkui.com/posts/go/channel/</link>
      <pubDate>Mon, 01 Jun 2020 18:46:47 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/channel/</guid>
      <description>channel 类型 go 中 channel 类型分为两类： 带缓冲区的channel，定义方式如：ch := make(chan int, 2) 不带缓冲区的channel，定义方式如：ch := make(chan int) 不带缓冲区的 c</description>
    </item>
    
    <item>
      <title>在go中使用单元测试</title>
      <link>https://wangtingkui.com/posts/go/unit-testing/</link>
      <pubDate>Sun, 17 May 2020 11:22:21 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/unit-testing/</guid>
      <description>单测能够极大的提升rd的回归效率（也能极大的提升开发效率），go内置了完整的单测支持 单测基本规则 单元测试文件必须以_test.go结尾 单元测</description>
    </item>
    
    <item>
      <title>使用 viper 处理项目配置</title>
      <link>https://wangtingkui.com/posts/go/viper/</link>
      <pubDate>Sun, 03 May 2020 12:05:47 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/viper/</guid>
      <description>viper 是一个 go 的配置解决方案，它支持多种多样的配置文件，也支持从配置系统读取配置，比如 etcd。它还可以监视配置文件的变动，实时的载入最新的配置</description>
    </item>
    
    <item>
      <title>使用 pkg/errors 进行错误处理</title>
      <link>https://wangtingkui.com/posts/go/errors/</link>
      <pubDate>Tue, 28 Apr 2020 16:53:09 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/errors/</guid>
      <description>当前，go 本身并没有良好的错误处理机制，一个比较常见错误处理方式如下： 1if err != nil { 2 return err 3} 然后层层传递，最终将错误传递到最上层，这里面存在着两</description>
    </item>
    
    <item>
      <title>Go标准库（time）- 使用</title>
      <link>https://wangtingkui.com/posts/go/time/</link>
      <pubDate>Sun, 12 Apr 2020 23:31:09 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/time/</guid>
      <description>本篇文章主要讲解下 go 的 time 包如何使用。go 中 time 的使用主要分为以下三个方面： 时间点的表示及其操作，以及时间点的格式化展示 时间段的表示及其操作 定时</description>
    </item>
    
    <item>
      <title>Go标准库（log）- 使用</title>
      <link>https://wangtingkui.com/posts/go/log/</link>
      <pubDate>Sun, 29 Mar 2020 17:51:54 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/log/</guid>
      <description>log 标准包实现了一个简单的日志功能，本片文章主要写下 log 标准包的基本使用 实例化 logger 进行日志记录 首先看一个最简单的 demo： 1package main 2 3import ( 4 &amp;#34;log&amp;#34; 5 &amp;#34;os&amp;#34; 6) 7 8func</description>
    </item>
    
    <item>
      <title>Go进行文件操作</title>
      <link>https://wangtingkui.com/posts/go/go-file-operation/</link>
      <pubDate>Sun, 05 Jan 2020 15:33:50 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/go-file-operation/</guid>
      <description>go 的 os 包提供了与基础的与操作系统无关的文件操作，包括创建、删除、读写等。同时为了更便捷的操作和性能上的提升，go在 io/ioutil 、bufio 等包中也提供</description>
    </item>
    
    <item>
      <title>Go标准库（net/http）- 使用</title>
      <link>https://wangtingkui.com/posts/go/%E4%BD%BF%E7%94%A8net-http/</link>
      <pubDate>Sun, 22 Dec 2019 11:48:21 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/%E4%BD%BF%E7%94%A8net-http/</guid>
      <description>net/http 包为我们提供了对 http 协议的处理，包含了客户端和服务端两大部分的实现 版本 go1.12 主要结构体 几乎任何语言中的http包都是围绕客户端，服务端，请求和响</description>
    </item>
    
    <item>
      <title>Go标准库（net/url）- 使用</title>
      <link>https://wangtingkui.com/posts/go/net-url/</link>
      <pubDate>Sat, 21 Dec 2019 22:21:40 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/net-url/</guid>
      <description>net/url包是官方为我们提供的处理 url 链接的库，基本能覆盖我们大多数场景下的使用 url 结构 在学习使用这个库之前，我们先来了解下 url 的标准结构：s</description>
    </item>
    
    <item>
      <title>go日志库zap使用</title>
      <link>https://wangtingkui.com/posts/go/zap/</link>
      <pubDate>Mon, 16 Dec 2019 22:45:34 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/zap/</guid>
      <description>zap 是一个高性能的第三方日志类库，本篇主要说明下如何使用 zap 版本 本篇基于的 zap 版本是 v1.10.0 使用 基本概念 在使用 zap 之前，我们还是先了解下 zap 里面的一些基本概</description>
    </item>
    
    <item>
      <title>Go标准库（path/filepath）- 使用</title>
      <link>https://wangtingkui.com/posts/go/path-filepath/</link>
      <pubDate>Sun, 15 Dec 2019 14:35:43 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/path-filepath/</guid>
      <description>简介 这个库主要是对文件路径的操作，是比较常用的一个库，由于这个库比较简单，没有什么需要过多的说明，大部分的方法会以实例的形式来展示 而且要注意</description>
    </item>
    
    <item>
      <title>go多版本管理</title>
      <link>https://wangtingkui.com/posts/go/go-multi-version-manage/</link>
      <pubDate>Fri, 13 Dec 2019 14:46:50 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/go-multi-version-manage/</guid>
      <description>之前写php，使用phpbrew来进行php的版本管理，非常方便，同样的，go也有自己的多版本管理工具gvm，这篇文章就记录下如何在mac下</description>
    </item>
    
    <item>
      <title>go cli 应用框架cobra（二）- 源码分析</title>
      <link>https://wangtingkui.com/posts/go/cobra/</link>
      <pubDate>Wed, 11 Dec 2019 14:57:37 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/cobra/</guid>
      <description>上一篇文章中简单介绍了如何使用cobra框架，这篇文章让我们来看下cobra的源码，本文基于的cobra版本是v0.0.5 首先需要了解的是，</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人网站（七）- 给你的文章分类</title>
      <link>https://wangtingkui.com/posts/tool/hugo-categorize-your-artical/</link>
      <pubDate>Sat, 07 Dec 2019 16:35:07 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/tool/hugo-categorize-your-artical/</guid>
      <description>hugo 内置了强大且支持自定义的分类系统，比如标签、类别、系列等，可以通过配置开启这些分类系统 在config.toml中配置： 1[taxonomies] 2tag = &amp;#34;tags&amp;#34; 3category = &amp;#34;categories&amp;#34; 4seris = &amp;#34;series&amp;#34;</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人网站（八）- 自定义你的站点域名</title>
      <link>https://wangtingkui.com/posts/tool/hugo-custom-your-domain/</link>
      <pubDate>Sat, 07 Dec 2019 16:35:07 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/tool/hugo-custom-your-domain/</guid>
      <description>github pages 为我们提供的站点域名是 &amp;lt;username&amp;gt;.github.io，但是有好多同学其实购买了自己的域名，那能否将自己的域名绑定到</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人网站（六）- 定制你文章的url</title>
      <link>https://wangtingkui.com/posts/tool/hugo-custom-your-url/</link>
      <pubDate>Sat, 07 Dec 2019 16:01:41 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/tool/hugo-custom-your-url/</guid>
      <description>默认情况下，站点文章的 url 和我们 content 目录下的文件结构是一一对应的，比如有 content/posts/test.md 这篇文章，当我们发布之后，在站点访问的 url 就是 &amp;lt;domian&amp;gt</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人网站（五）- 模板选择顺序</title>
      <link>https://wangtingkui.com/posts/tool/hugo-template-order/</link>
      <pubDate>Sat, 07 Dec 2019 15:55:24 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/tool/hugo-template-order/</guid>
      <description>加入我们要寻找content/posts下文章的模板 当我们未在Front Matter中指定type和layout属性的时候，hugo默认的模</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人网站（四）- Front Matter 配置详解</title>
      <link>https://wangtingkui.com/posts/tool/front-matter/</link>
      <pubDate>Sat, 07 Dec 2019 15:31:44 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/tool/front-matter/</guid>
      <description>Front Matter 是扉页，前页的意思，顾名思义，他出现在我们文章的最前面，用来设定一些文章的元信息，比如是否是草稿，写作时间，文章所属的标签等等。 Front Matter 支持</description>
    </item>
    
    <item>
      <title>Go标准库（flag）- 使用</title>
      <link>https://wangtingkui.com/posts/go/%E4%BD%BF%E7%94%A8flag/</link>
      <pubDate>Sun, 01 Dec 2019 17:28:45 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/go/%E4%BD%BF%E7%94%A8flag/</guid>
      <description>本文所讨论内容基于的go版本：go1.13 在我们编写命令行程序的时候，解析命令行的参数是非常常见的一种需求，Go标准库中的flag包为我们提</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人网站（二）- 使用 github pages 部署 hugo 生成的静态站点</title>
      <link>https://wangtingkui.com/posts/tool/deploy-on-github-pages/</link>
      <pubDate>Sun, 01 Dec 2019 13:56:09 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/tool/deploy-on-github-pages/</guid>
      <description>上一篇文章已经让我们简单了解了如何使用hugo，但是我们使用hugo的最终目的还是依靠它去搭建一个我们的个人站点，hugo能解决的是静态站点</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人网站（一）- hugo使用入门</title>
      <link>https://wangtingkui.com/posts/tool/introduction/</link>
      <pubDate>Sun, 22 Sep 2019 15:28:34 +0800</pubDate>
      
      <guid>https://wangtingkui.com/posts/tool/introduction/</guid>
      <description>以blog为例，看看hugo是如何使用的 创建一个网站项目 hugo new site blog， 执行这个命令后，会在当前目录下创建一个blog目录 ，这个目录就是我们</description>
    </item>
    
  </channel>
</rss>
