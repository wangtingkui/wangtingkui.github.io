<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go三方库使用和源码分析 on xiaok&#39;s blog</title>
    <link>https://wangtingkui.space/categories/go%E4%B8%89%E6%96%B9%E5%BA%93%E4%BD%BF%E7%94%A8%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <description>Recent content in go三方库使用和源码分析 on xiaok&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 13 Aug 2022 16:21:30 +0800</lastBuildDate><atom:link href="https://wangtingkui.space/categories/go%E4%B8%89%E6%96%B9%E5%BA%93%E4%BD%BF%E7%94%A8%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mapstructure 库的使用和分析</title>
      <link>https://wangtingkui.space/posts/go/mapstructure/</link>
      <pubDate>Sat, 13 Aug 2022 16:21:30 +0800</pubDate>
      
      <guid>https://wangtingkui.space/posts/go/mapstructure/</guid>
      <description>使用viper的时候看到了这个库，觉得在项目中还是有很多使用场景的，所以拿来说一说 mapsturcture 干什么用的 根据其官网 的说明，mapstructure是用</description>
    </item>
    
    <item>
      <title>使用 jordan-wright/email 处理邮件发送</title>
      <link>https://wangtingkui.space/posts/go/mail/</link>
      <pubDate>Sun, 07 Jun 2020 14:49:31 +0800</pubDate>
      
      <guid>https://wangtingkui.space/posts/go/mail/</guid>
      <description>在 go 官方的标准库中，提供了 net/smtp 库可以让我们使用 smtp 协议来发送邮件，但是这个库使用起来不是很方便，而且官方也不再维护这个库，推荐我们使用功能更丰富</description>
    </item>
    
    <item>
      <title>使用 viper 处理项目配置</title>
      <link>https://wangtingkui.space/posts/go/viper/</link>
      <pubDate>Sun, 03 May 2020 12:05:47 +0800</pubDate>
      
      <guid>https://wangtingkui.space/posts/go/viper/</guid>
      <description>viper 是一个 go 的配置解决方案，它支持多种多样的配置文件，也支持从配置系统读取配置，比如 etcd。它还可以监视配置文件的变动，实时的载入最新的配置</description>
    </item>
    
    <item>
      <title>使用 pkg/errors 进行错误处理</title>
      <link>https://wangtingkui.space/posts/go/errors/</link>
      <pubDate>Tue, 28 Apr 2020 16:53:09 +0800</pubDate>
      
      <guid>https://wangtingkui.space/posts/go/errors/</guid>
      <description>当前，go 本身并没有良好的错误处理机制，一个比较常见错误处理方式如下： 1if err != nil { 2return err 3} 然后层层传递，最终将错误传递到最上层，这里面存在着两个</description>
    </item>
    
    <item>
      <title>go日志库zap使用</title>
      <link>https://wangtingkui.space/posts/go/zap/</link>
      <pubDate>Mon, 16 Dec 2019 22:45:34 +0800</pubDate>
      
      <guid>https://wangtingkui.space/posts/go/zap/</guid>
      <description>zap 是一个高性能的第三方日志类库，本篇主要说明下如何使用 zap 版本 本篇基于的 zap 版本是 v1.10.0 使用 基本概念 在使用 zap 之前，我们还是先了解下 zap 里面的一些基本概</description>
    </item>
    
    <item>
      <title>go cli 应用框架cobra（二）- 源码分析</title>
      <link>https://wangtingkui.space/posts/go/cobra/</link>
      <pubDate>Wed, 11 Dec 2019 14:57:37 +0800</pubDate>
      
      <guid>https://wangtingkui.space/posts/go/cobra/</guid>
      <description>上一篇文章中简单介绍了如何使用cobra框架，这篇文章让我们来看下cobra的源码，本文基于的cobra版本是v0.0.5 首先需要了解的是，</description>
    </item>
    
    <item>
      <title>go cli 应用框架cobra（一）- 简介</title>
      <link>https://wangtingkui.space/posts/go/%E4%BD%BF%E7%94%A8cobra/</link>
      <pubDate>Sun, 01 Dec 2019 10:17:30 +0800</pubDate>
      
      <guid>https://wangtingkui.space/posts/go/%E4%BD%BF%E7%94%A8cobra/</guid>
      <description>简介 cobra是一个go语言的命令行应用框架，他也是一个用来快速生成命令行应用的脚手架 一些基础概念 cobra推崇的是The best applications will read like sentences when used. Users</description>
    </item>
    
  </channel>
</rss>
